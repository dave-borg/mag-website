---
# eks-playbook.yaml
- name: Setup EKS cluster and deploy containers
  hosts: localhost
  connection: local
  gather_facts: true
  vars_files:
    - vars.yml

  tasks:
    - name: Check if required Python packages are installed
      ansible.builtin.pip:
        name:
          - boto3
          - kubernetes
        state: present
      become: yes

    - name: Get AWS account ID
      amazon.aws.aws_caller_info:
        profile: "{{ aws.profile }}"
      register: aws_caller_info

    - name: Get VPC ID
      amazon.aws.ec2_vpc_net_info:
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        filters:
          "tag:Name": "{{ vpc.name }}"
      register: vpc_info

    - name: Get subnet information
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        filters:
          vpc-id: "{{ vpc_info.vpcs[0].id }}"
      register: subnet_info

    - name: Create EKS cluster security group
      amazon.aws.ec2_security_group:
        name: "{{ eks.cluster_name }}-cluster-sg"
        description: Security group for EKS cluster
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        rules:
          - proto: tcp
            ports: 
              - 443
            cidr_ip: 0.0.0.0/0
            rule_desc: Allow HTTPS from anywhere
          - proto: tcp
            from_port: 1025
            to_port: 65535
            cidr_ip: 0.0.0.0/0
            rule_desc: Allow return traffic for services
      register: eks_cluster_sg

    - name: Create EKS cluster
      community.aws.eks_cluster:
        name: "{{ eks.cluster_name }}"
        version: "{{ eks.kubernetes_version }}"
        role_arn: "arn:aws:iam::{{ aws_caller_info.account }}:role/{{ eks.cluster_role_name }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        subnets: "{{ subnet_info.subnets | selectattr('tags.Name', 'match', '^private-subnet-.*') | map(attribute='id') | list }}"
        security_groups: 
          - "{{ eks_cluster_sg.group_id }}"
        state: present
        wait: yes
      register: eks_cluster

    # Configure kubectl
    - name: Update kubeconfig
      ansible.builtin.command:
        cmd: "aws eks update-kubeconfig --name {{ eks.cluster_name }} --region {{ aws.region }} --profile {{ aws.profile }}"
      register: kubeconfig_update
      changed_when: "'Updated context' in kubeconfig_update.stdout"

    - name: Verify connection to cluster
      ansible.builtin.command:
        cmd: "kubectl get nodes"
      register: kubectl_test
      changed_when: false
      retries: 3
      delay: 5
      until: kubectl_test is not failed

    # Deploy Application
    - name: Create namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ k8s.namespace }}"
        state: present

    - name: Apply Kubernetes Deployment
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mag-site
            namespace: "{{ k8s.namespace }}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: mag-site
            template:
              metadata:
                labels:
                  app: mag-site
              spec:
                containers:
                - name: mag-site
                  image: "{{ aws_caller_info.account }}.dkr.ecr.{{ aws.region }}.amazonaws.com/{{ ecr.repository }}:latest"
                  ports:
                    - containerPort: 80
        state: present

    - name: Create LoadBalancer service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: mag-site
            namespace: "{{ k8s.namespace }}"
          spec:
            type: LoadBalancer
            ports:
              - port: 80
                targetPort: 80
                protocol: TCP
            selector:
              app: mag-site

    # Verify and Output Results
    - name: Wait for LoadBalancer External hostname
      ansible.builtin.command: kubectl get svc mag-site -n {{ k8s.namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
      register: loadbalancer_hostname
      until: loadbalancer_hostname.stdout != ""
      retries: 30
      delay: 10

    - name: Wait for DNS propagation
      ansible.builtin.command: >
        nslookup {{ loadbalancer_hostname.stdout }}
      register: dns_check
      until: dns_check.rc == 0
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Output LoadBalancer Hostname
      debug:
        msg: |
          Website is available at http://{{ loadbalancer_hostname.stdout }}
          Please allow a few minutes for DNS propagation and the service to be fully available.