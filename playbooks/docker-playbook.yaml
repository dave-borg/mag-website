---
# hugo-deploy.yml
- name: Deploy Hugo site to ECR
  hosts: localhost
  gather_facts: no
  vars_files:
    - vars.yml
  vars:
    project_root: "{{ playbook_dir }}"

  tasks:
    - name: Ensure required collections are installed
      ansible.builtin.pip:
        name:
          - boto3
          - docker
        state: present
      become: yes

    - name: Get AWS account ID
      amazon.aws.aws_caller_info:
        profile: "{{ aws.profile }}"
      register: aws_caller_info

    - name: Set ECR repository URI
      set_fact:
        ecr_registry: "{{ aws_caller_info.account }}.dkr.ecr.{{ aws.region }}.amazonaws.com"
        repository_uri: "{{ aws_caller_info.account }}.dkr.ecr.{{ aws.region }}.amazonaws.com/{{ ecr.repository }}"

    - name: Build Docker image with Buildx for AMD64
      ansible.builtin.command: >
        docker buildx build
        --platform linux/amd64
        -t {{ docker.local_image_name }}:{{ docker.img_tag }}
        {{ docker.build_path }} --load
      environment:
        DOCKER_BUILDKIT: 1
        DOCKER_HOST: "unix://{{ docker.socket_path }}"
      register: build_output

    - name: Get ECR login token
      community.docker.docker_login:
        registry_url: "{{ ecr_registry }}"
        username: AWS
        password: "{{ lookup('pipe', 'aws ecr get-login-password --region ' + aws.region + ' --profile ' + aws.profile) }}"
        reauthorize: true
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Tag image with ECR repository version
      command: docker tag "{{ docker.local_image_name }}:{{ docker.img_tag }}" "{{ repository_uri }}:{{ docker.img_tag }}"
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Tag image with ECR repository latest
      command: docker tag "{{ docker.local_image_name }}:{{ docker.img_tag }}" "{{ repository_uri }}:latest"
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Push to ECR (version tag)
      community.docker.docker_image:
        source: local
        name: "{{ repository_uri }}"
        tag: "{{ docker.img_tag }}"
        push: yes
        force_tag: yes
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Push to ECR (latest tag)
      community.docker.docker_image:
        source: local
        name: "{{ repository_uri }}"
        tag: "latest"
        push: yes
        force_tag: yes
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Check if ECR repository exists
      community.aws.ecs_ecr:
        profile: "{{ aws.profile }}"
        region: "{{ aws.region }}"
        name: "{{ ecr.repository }}"
      register: ecr_repo
      ignore_errors: true

    - name: Create ECR repository if it doesn't exist
      community.aws.ecs_ecr:
        profile: "{{ aws.profile }}"
        region: "{{ aws.region }}"
        name: "{{ ecr.repository }}"
        registry_id: "{{ aws_caller_info.account }}"
        image_tag_mutability: mutable
        state: present
      when: ecr_repo.failed or ecr_repo.repositories is not defined

    - name: Push to ECR (version tag)
      community.docker.docker_image:
        source: local
        name: "{{ repository_uri }}"
        tag: "{{ docker.img_tag }}"
        push: yes
        force_tag: yes
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Push to ECR (latest tag)
      community.docker.docker_image:
        source: local
        name: "{{ repository_uri }}"
        tag: "latest"
        push: yes
        force_tag: yes
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Clean up ECR tags locally
      community.docker.docker_image:
        name: "{{ repository_uri }}"
        tag: "{{ item }}"
        state: absent
      loop:
        - "{{ docker.img_tag }}"
        - latest
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"

    - name: Clean up local image
      community.docker.docker_image:
        name: "{{ docker.local_image_name }}"
        tag: "{{ docker.img_tag }}"
        state: absent
      environment:
        DOCKER_HOST: "unix://{{ docker.socket_path }}"
