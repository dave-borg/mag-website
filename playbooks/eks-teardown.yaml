---
# eks-teardown.yaml
- name: Teardown EKS cluster and associated resources
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yml

  tasks:
    - name: Get AWS account ID
      amazon.aws.aws_caller_info:
        profile: "{{ aws.profile }}"
      register: aws_caller_info

    - name: Update kubeconfig for cluster
      command: >
        aws eks update-kubeconfig
        --name {{ eks.cluster_name }}
        --region {{ aws.region }}
        --profile {{ aws.profile }}
      ignore_errors: true

    - name: Delete Kubernetes service
      kubernetes.core.k8s:
        kind: Service
        name: mag-site
        namespace: "{{ k8s.namespace }}"
        state: absent
      environment:
        K8S_AUTH_TOKEN: "{{ lookup('pipe', 'aws eks get-token --cluster-name ' + eks.cluster_name + ' --region ' + aws.region + ' --profile ' + aws.profile) }}"
        K8S_HOST: "{{ lookup('pipe', 'aws eks describe-cluster --name ' + eks.cluster_name + ' --region ' + aws.region + ' --profile ' + aws.profile + ' --query cluster.endpoint --output text') }}"
      ignore_errors: true

    - name: Delete Kubernetes deployment
      kubernetes.core.k8s:
        kind: Deployment
        name: mag-site
        namespace: "{{ k8s.namespace }}"
        state: absent
      environment:
        K8S_AUTH_TOKEN: "{{ lookup('pipe', 'aws eks get-token --cluster-name ' + eks.cluster_name + ' --region ' + aws.region + ' --profile ' + aws.profile) }}"
        K8S_HOST: "{{ lookup('pipe', 'aws eks describe-cluster --name ' + eks.cluster_name + ' --region ' + aws.region + ' --profile ' + aws.profile + ' --query cluster.endpoint --output text') }}"
      ignore_errors: true

    - name: Delete Kubernetes namespace
      kubernetes.core.k8s:
        kind: Namespace
        name: "{{ k8s.namespace }}"
        state: absent
      environment:
        K8S_AUTH_TOKEN: "{{ lookup('pipe', 'aws eks get-token --cluster-name ' + eks.cluster_name + ' --region ' + aws.region + ' --profile ' + aws.profile) }}"
        K8S_HOST: "{{ lookup('pipe', 'aws eks describe-cluster --name ' + eks.cluster_name + ' --region ' + aws.region + ' --profile ' + aws.profile + ' --query cluster.endpoint --output text') }}"
      ignore_errors: true

    - name: Delete EKS node group
      community.aws.eks_nodegroup:
        name: "{{ eks.node_group_name }}"
        cluster_name: "{{ eks.cluster_name }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        state: absent
        wait: true
      ignore_errors: true

    - name: Delete EKS cluster
      community.aws.eks_cluster:
        name: "{{ eks.cluster_name }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        state: absent
        wait: true
      ignore_errors: true

    - name: Get VPC info
      amazon.aws.ec2_vpc_net_info:
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        filters:
          "tag:Name": "{{ vpc.name }}"
      register: vpc_info

    - name: Remove ingress rules from cluster security group
      amazon.aws.ec2_security_group:
        name: "{{ eks.cluster_name }}-cluster-sg"
        description: "Security group for EKS cluster"
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        rules: []
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow all outbound traffic"
      ignore_errors: true

    - name: Remove ingress rules from node security group
      amazon.aws.ec2_security_group:
        name: "{{ eks.cluster_name }}-node-sg"
        description: "Security group for EKS nodes"
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        rules: []
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
            rule_desc: "Allow all outbound traffic"
      ignore_errors: true

    - name: Delete EKS node security group
      amazon.aws.ec2_security_group:
        name: "{{ eks.cluster_name }}-node-sg"
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        state: absent
      ignore_errors: true

    - name: Delete EKS cluster security group
      amazon.aws.ec2_security_group:
        name: "{{ eks.cluster_name }}-cluster-sg"
        vpc_id: "{{ vpc_info.vpcs[0].id }}"
        region: "{{ aws.region }}"
        profile: "{{ aws.profile }}"
        state: absent
      ignore_errors: true

    - name: Get attached policies for node role
      command: >
        aws iam list-attached-role-policies
        --role-name {{ eks.node_role_name }}
        --profile {{ aws.profile }}
      register: node_role_policies
      ignore_errors: true

    - name: Detach policies from node role
      command: >
        aws iam detach-role-policy
        --role-name {{ eks.node_role_name }}
        --policy-arn {{ item.PolicyArn }}
        --profile {{ aws.profile }}
      loop: "{{ (node_role_policies.stdout | from_json).AttachedPolicies }}"
      ignore_errors: true
      when: node_role_policies.rc == 0

    - name: Get attached policies for cluster role
      command: >
        aws iam list-attached-role-policies
        --role-name {{ eks.cluster_role_name }}
        --profile {{ aws.profile }}
      register: cluster_role_policies
      ignore_errors: true

    - name: Detach policies from cluster role
      command: >
        aws iam detach-role-policy
        --role-name {{ eks.cluster_role_name }}
        --policy-arn {{ item.PolicyArn }}
        --profile {{ aws.profile }}
      loop: "{{ (cluster_role_policies.stdout | from_json).AttachedPolicies }}"
      ignore_errors: true
      when: cluster_role_policies.rc == 0

    - name: Delete EKS node role
      community.aws.iam_role:
        name: "{{ eks.node_role_name }}"
        profile: "{{ aws.profile }}"
        state: absent
      ignore_errors: true

    - name: Delete EKS cluster role
      community.aws.iam_role:
        name: "{{ eks.cluster_role_name }}"
        profile: "{{ aws.profile }}"
        state: absent
      ignore_errors: true

    - name: Remove cluster from kubeconfig
      command: >
        kubectl config delete-context arn:aws:eks:{{ aws.region }}:{{ aws_caller_info.account }}:cluster/{{ eks.cluster_name }}
      ignore_errors: true

    - name: Display cleanup results
      debug:
        msg: 
          - "EKS cluster {{ eks.cluster_name }} and associated resources have been removed"
          - "Please verify in the AWS Console that all resources have been properly deleted"